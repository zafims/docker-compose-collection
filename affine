# Change these
#      - AFFINE_ADMIN_EMAIL=yourown@email
#      - AFFINE_ADMIN_PASSWORD=zafims.au
#       Web Access: <server IP>:3010

# --------------------- 1st Way ----------------------

version: '3.9'
services:
  affine:
    image: ghcr.io/toeverything/affine-graphql:stable
    container_name: AFFINE
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/3010' || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    command:
      ['sh', '-c', 'node ./scripts/self-host-predeploy && node ./dist/index.js']
    ports:
      - 3010:3010
      - 5555:5555
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - /volume1/docker/affine/config:/root/.affine/config:rw
      - /volume1/docker/affine/storage:/root/.affine/storage:rw
    logging:
      driver: 'json-file'
      options:
        max-size: '1000m'
    restart: on-failure:5
    environment:
      - NODE_OPTIONS="--import=./scripts/register.js"
      - AFFINE_CONFIG_PATH=/root/.affine/config
      - REDIS_SERVER_HOST=redis
      - DATABASE_URL=postgres://affineuser:affinepass@postgres:5432/affine?sslmode=disable
      - NODE_ENV=production
      - AFFINE_ADMIN_EMAIL=yourown@email
      - AFFINE_ADMIN_PASSWORD=zafims.au
  redis:
    image: redis:latest
    container_name: AFFINE-REDIS
    restart: on-failure:5
    volumes:
      - /volume1/docker/affine/redis:/data:rw
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
  postgres:
    image: postgres:16
    container_name: AFFINE-DB
    restart: on-failure:5
    volumes:
      - /volume1/docker/affine/db:/var/lib/postgresql/data:rw
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "affine", "-U", "affinesuser"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: affineuser
      POSTGRES_PASSWORD: affinepass
      POSTGRES_DB: affine
      PGDATA: /var/lib/postgresql/data/pgdata

# -------------- 2nd Way ----------------------

# docker network create traefik-network
# docker network create affine-network

# git clone https://github.com/heyValdemar/affine-traefik-letsencrypt-docker-compose.git
# cd affine-traefik-letsencrypt-docker-compose

# docker compose -f affine-traefik-letsencrypt-docker-compose.yml -p affine up -d

# http://localhost:3010
